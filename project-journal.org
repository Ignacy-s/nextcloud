Need to setup my own Nextcloud/Owncloud instance for wedding
pictures.
* DONE Choosing what to install - Nextcloud has ~20k stars on Github, Owncloud - ~7.5k. Choosing Nextcloud
  CLOSED: [2022-07-04 Mon 09:17]
* DONE Choosing how to install.
  CLOSED: [2022-07-04 Mon 09:17]
** Using Nextcloud docker image.
* DONE Local demo without compose - just the Nextcloud container.
  CLOSED: [2022-07-04 Mon 09:16]
** Found installation instructions in the manual, but why bother. Better use docker images.
** Deciding not to over complicate implementation for now and leave all the bells and whistles ideas as  extr
** For starter managed to access web server on vagrant machine from friends mobile phone. (Re-started container in bridged network mode and found it's ip address).
*** Had some issues at first, but then realized that friend is not connected to my hotspot.
* DONE Local demo with docker-compose, multiple containers, but without proper secrets handling.
  CLOSED: [2022-07-04 Mon 23:52]
** Using the docker compose file from image's documentation (that can be found in this document under 'Feature Ideas>Use docker compose').
** Had to download docker-compose. Started the service by running 'docker-compose -d up' in the directory where I pasted the compose.yml file. It works as intended.

* DONE Running a Traefik tutorial from [[https://doc.traefik.io/traefik/getting-started/quick-start/][here]]. Still have notes from the last time I used Traefik, but it has been a while and it's just about creating some docker-compose files.
  CLOSED: [2022-07-08 Fri 02:38]
*** First docker compose from quickstart tutorial.
#+BEGIN_SRC ruby
version: '3'

services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.7
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
#+END_SRC
**** Adding whoami service:
#+BEGIN_SRC ruby
  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    labels:
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
#+END_SRC
**** Scaled up with 'docker-compose up -d --scale whoami=2' and can see how service is load balanced with 'curl -H Host:whoami.docker.localhost http://127.0.0.1' showing different machines.
** As I understand, Traefik doesn't change much in how the system's docker-compose file will be made. It's just another container to be run along others. And the other containers need an extra rubric in docker-compose file with labels to be read by Traefik.
* DONE Learning up on DNS in Docker from [[https://web.archive.org/web/20210724052518/https://kerneltalks.com/networking/how-docker-container-dns-works/][blog article on wayback machine]].
  CLOSED: [2022-07-08 Fri 02:38]
* DONE Getting a domain with Cloud Flare.
  CLOSED: [2022-07-08 Fri 02:42]
* DONE Local demo with docker-compose, traefik and portainer alongside, defining a network. Based on edited compose file from previous class.
CLOSED: [2022-07-18 Mon 20:31]
** Writing a new docker-compose file based on examples from Docker Masterclass, Panda DevOps and Traefik Quickstart tutorial.
*** After defining the network, adding traefik container, nextcloud container and db for nextcloud.
#+BEGIN_SRC bash
version : '3'
# Defining a personal Nextcloud server with Traefik and Portainer

services:
  traefik-proxy:
    # Handles TLS certs and http to https redirection
    image: traefik:2.8
    restart: always
    container_name: traefik
    command:
      # Enables the web UI
      - "--api.insecure=true"
      # Declares cooperation with docker
      - "--providers.docker"
      ports:
        - "80:80"
        # For Web UI enabled by 'api-insecure'
        - "8080:8080"
      volumes:
        # Enables docker cooperation
        - "/var/run/docker.sock:/var/run/docker.sock:ro"

  nextcloud:
    image: nextcloud
    restart: always
    depends_on:
      - traefik-proxy
      - db-next
    volumes:
      - nextcloud:/var/www/html
    environment:
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=db
      
    networks:
      - nextcloud_db_network
      
  db-next:
    image: mariadb
    restart: always
    command:
      - --transaction-isolation=READ-COMMITTED
      - --binlog-format=ROW
    volumes:
      - db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
    depends_on:
      - traefik-proxy
    networks:
      - nextcloud_db_network
              



networks:
  nextcloud_db_network:
    driver: bridge
#+END_SRC
*** DONE Add volumes
    CLOSED: [2022-07-08 Fri 17:42]
#+BEGIN_SRC bash
version : '3'
# Defining a personal Nextcloud server with Traefik and Portainer

services:
  traefik-proxy:
    # Handles TLS certs and http to https redirection
    image: traefik:2.8
    restart: always
    container_name: traefik
    command:
      # Enables the web UI
      - "--api.insecure=true"
      # Declares cooperation with docker
      - "--providers.docker"
      # Defines entry for regular http traffic.
      - "--entryPoints.web.address=:80"
      # Redirects http to https
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # Defines https entry
      - "--entryPoints.websecure.address=:443"
      

    ports:
      - "80:80"
      # For Web UI enabled by 'api-insecure'
      - "8080:8080"
    volumes:
      # Enables docker cooperation
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  nextcloud:
    image: nextcloud
    restart: always
    depends_on:
      - traefik-proxy
      - db-next
    volumes:
      - nextcloud:/var/www/html
    environment:
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=db

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.localhost`)"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
    networks:
      - nextcloud_db_network
      
  db-next:
    image: mariadb
    restart: always
    command:
      - --transaction-isolation=READ-COMMITTED
      - --binlog-format=ROW
    volumes:
      - db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
    depends_on:
      - traefik-proxy
    networks:
      - nextcloud_db_network

networks:
  nextcloud_db_network:
    driver: bridge

volumes:
  nextcloud:
  db:
#+END_SRC
**** TODO See if it runs.
***** Doesn't run - trying with a simpler setup.
***** Got the quickstart demo to run. Had to modify a HTTP Header.
http headers are sent along with the http request. They have to be
changed if we connect with a host behind traefik. Before I used curl
to get it to run. Defining headers in curl is easy:
curl -H Host:whoami.docker.localhost http://127.0.0.1

For use with Firefox and connecting from a different machine on the
same local network, we need to modify the Host header in the
browser. Tried 3 extensions, third worked for me. [[https://mybrowseraddon.com/modify-header-value.html][Modify Header Value
(HTTP Headers)]]
***** Trying to use the same Firefox Extension to modify header.
****** Opening traefik dashboard to find out what to put in the Host header.
it's under IP_ADDRESS:8080/dashboard
***** Something was wrong, so I added the whoami container to the nextcloud docker-compose. Whoami was working (pointing at the http://192.168.1.187/ with Host('whoami.docker.localhost')).
***** Spent lot of time trying to have nextcloud work the same way (just changing part of the host header to Host('nextcloud.docker.localhost').
***** Found the error, when scrolled up the screen. There was an orphan container when I removed whoami from docker-compose file.
***** DONE Working with limited functionality - kept removing things from the docker-compose.
      CLOSED: [2022-07-08 Fri 19:58]
****** docker-compose atm:

#+BEGIN_SRC yaml
version : '3'
# Defining a personal Nextcloud server with Traefik and Portainer

services:
  traefik-proxy:
    # Handles TLS certs and http to https redirection
    image: traefik:2.8
    restart: always
    container_name: traefik
    command:
      # Enables the web UI
      - "--api.insecure=true"
      # Declares cooperation with docker
      - "--providers.docker"
      # Defines entry for regular http traffic.
      - "--entryPoints.web.address=:80"
      # Redirects http to https
#      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
#      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # Defines https entry
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker.exposedbydefault=false"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      # For Web UI enabled by 'api-insecure'
      - "8080:8080"
      - "443:443"
    volumes:
      # Enables docker cooperation
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  nextcloud:
    image: nextcloud
    restart: always
    container_name: nextcloud
    depends_on:
      - traefik-proxy
      - db-next
    volumes:
      - nextcloud:/var/www/html
    environment:
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=db

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.docker.localhost`)"
      # - "traefik.http.routers.nextcloud.entrypoints=websecure"
      # - "traefik.http.routers.nextcloud.entrypoints=web"
    # networks:
    #   - nextcloud_db_network
      
  # Putting a whoami container to check if it will work.
  
  # whoami:
  #   # A container that exposes an API to show its IP address
  #   image: traefik/whoami
  #   container_name: whoami
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
  #     # - "traefik.http.routers.nextcloud.entrypoints=websecure"
  #     # - "traefik.http.routers.nextcloud.entrypoints=web"


  db-next:
    image: mariadb
    restart: always
    command:
      - --transaction-isolation=READ-COMMITTED
      - --binlog-format=ROW
    volumes:
      - db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
    depends_on:
      - traefik-proxy
    networks:
      - nextcloud_db_network

networks:
  nextcloud_db_network:
    driver: bridge

volumes:
  nextcloud:
  db:
#+END_SRC

***** Uncomment things in docker-compose and see what happens. - It's the network defined in docker-compose that caused problems.
***** Need to learn how to connect nextcloud container with the database container using traefik.

** [[https://duckduckgo.com/?q=traefik+example+connect+app+and+database+containers&t=ffab&ia=web][Search for the docs]] resulted with an interesting find - example traefik/portainer/compose setup in a [[https://rafrasenberg.com/posts/docker-container-management-with-traefik-v2-and-portainer/][blog article]].
** DONE Connect app and db containers using Traefik. (for routing that doesn't leave the cluster, don't use traefik but use docker networks instead)
CLOSED: [2022-07-17 Sun 16:35]
*** DONE Downloading project files from Raf's (blog author) Github repo.
CLOSED: [2022-07-15 Fri 23:20]
#+BEGIN_SRC bash
  mkdir /vagrant/nextcloud-raf-local
  cd !$
  curl -L \ https://github.com/rafrasenberg/docker-traefik-portainer/archive/master.tar.gz\
    | tar --strip-components=1 -zxf -
#+END_SRC
*** DONE Commenting out things related to https.
CLOSED: [2022-07-15 Fri 23:20]
*** DONE Updating the password.
CLOSED: [2022-07-15 Fri 23:20]
Used 'htpasswd -n igi'.
'htpasswd' can be found in the 'apache2-utils' package (on Ubuntu).
*** DONE Looking for workaround to using the 'Host' http header for routing - too lazy to forge http requests using browser plugins
CLOSED: [2022-07-15 Fri 00:24]
Http request consists of several things, one of them can be one or many
headers. One of the headers carries information on what the hostname
that we tried to access was. Http request is sent to an IP address, so
the Host header can be handy. Since I'm typing the IP address in the
browser, have to find another way to let traefik know which service I
want to access.
*** DONE Adding new entrypoint for traefik dashboard. This way regular traffic will go to the portainer container and port 8080 to traefik dashboard.
CLOSED: [2022-07-15 Fri 00:24]
*** DONE Add the nextcloud service and db for nextcloud.
CLOSED: [2022-07-17 Sun 16:35]
For that I need to create a new docker-compose stack (so it's called
in portainer settings). What needs to change compared to the first
nextcloud local demo without traefik is traefik labels, including
labels for the docker networks. Reminding myself that I had to remove
networks and https to get my local setup to work. Now I know why -
when using traefik, we need to also define the network in traefik
labels, the regular definition is not enough.
**** DONE Copying last working nextcloud setup to apps folder in raf setup's directory.
CLOSED: [2022-07-16 Sat 17:14]
**** DONE Fix the ingress for traefik (entrypoint with a dash '-' in it's name didn't work, maybe it's something with Golang's grammar? Changing dash to underscore '_', because there are other things in yaml files that have underscores in it's names) - turns out it was something else. Both dashes and underscores are ok in entrypoint names.
CLOSED: [2022-07-16 Sat 17:20]
**** DONE Create a new ingress for portainer so that nextcloud can use the default (port 80) route. It works, I think I'm getting the hang of using traefik.
CLOSED: [2022-07-16 Sat 17:23]
**** DONE Setup the network for nextcloud and it's database in the traefik way (with proper labels).
CLOSED: [2022-07-16 Sat 18:06]
***** Had a problem with whether I should route the to-database-traffic with Traefik. [[https://www.digitalocean.com/community/tutorials/how-to-use-traefik-v2-as-a-reverse-proxy-for-docker-containers-on-ubuntu-20-04][This digitalocean article]] says that it's enough to use docker networks, and to also tell traefik not to touch this container.
***** Works :)
** DONE Add secrets
CLOSED: [2022-07-18 Mon 20:31]
*** DONE Reading up on how to use secrets with docker compose. Mentioning some sites:
CLOSED: [2022-07-18 Mon 20:06]
**** Example usage of docker secrets from [[https://www.rockyourcode.com/using-docker-secrets-with-docker-compose/][a blog article.]]
**** Documentation at [[https://docs.docker.com/engine/swarm/secrets/][docker.com docs on secrets.]]
***** This one is about using the 'docker secret' command which requires usage of docker swarm mode.
**** Documentation at [[https://docs.docker.com/compose/compose-file/compose-file-v3/#secrets][docker.com on secrets in compose file.]]
**** Thoughts on secrets in project:
***** For a local setup we can use files containing the secrets.
***** For a proper production setup, I could use docker swarm to declare secrets on a different node.
***** It's a second time somebody suggests that docker-compose is for testing and production should be run with 'docker stack create -c PATH_TO_COMPOSE_FILE' which uses docker swarm and same compose files as the docker-compose command I used until now.
*** DONE Solving the problem of referencing path to secrets instead of actual values. Saw a PostgreSQL example with '_FILE' appended to environment variable names. Read up in documentation for the mariadb image on dockerhub that they use the same '*_FILE' style of variable names.
CLOSED: [2022-07-18 Mon 20:06]
*** DONE Putting secrets into the nextcloud compose file.
CLOSED: [2022-07-18 Mon 20:06]
*** DONE Populate the secrets file.
CLOSED: [2022-07-18 Mon 20:26]
Using 'openssl rand -base64 LENGTH' to populate files with random
strings of sufficient length.
*** DONE Issues - compose refuses to work with secrets.
CLOSED: [2022-07-18 Mon 20:31]
**** Tweaking the "version: '3'" - I have a feeling it's the version that is the problem.
Reading up in compose docs I've found this [[https://docs.docker.com/compose/compose-file/compose-versioning/][compatibility matrix]]. It
says that the latest version is 3.8 and it should work with my compose
version (found with 'docker-compose --version' command) - 1.25.

It was however not recognized, just like version "4". With "version:
.." removed, it calls even more errors about not recognized top level
keywords.

Had a hunch and changed it to 3.7. It works now.

** DONE Get Portainer.
CLOSED: [2022-07-17 Sun 14:20]
* TODO Online demo using the domain.
** DONE Problem - tracking online server's setup with git?
CLOSED: [2022-08-04 Thu 20:01]
*** Solution proposal - Run the setup from local machine (where the code is) by an scp (rsync) & ssh compound command on a remote server.
*** Chosen This - Solution proposal - Have a script that copies files from the server (but not the certs and similar). Going with this one, as there are only 3 files to copy into the repo. Script will also remove the password hash and put in in another file that will be tracked by git. At the same time I have a fully working setup on my computer.
*** Writing the script - get-core-files-from-server.sh
** DONE Getting the docker-compose file to run on the server.
CLOSED: [2022-08-04 Thu 19:42]
*** DONE Installing docker & utils on the server.
CLOSED: [2022-08-03 Wed 20:43]
**** Found that docker.io from default Ubuntu repo is 20.10.7, while one downloaded from Docker repo is 20.10.17, doesn't seem like that much of a difference. Could've just installed from Ubuntu.
**** Installing docker like it was installed in provision.sh script for PandaVM from panda dev ops course.
#+BEGIN_SRC bash
# Installing docker (from
# https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-from-a-package
# )
sudo apt update
sudo apt install -y \
     apt-transport-https \
     ca-certificates \
     curl \
     gnupg \
     lsb-release

# Download docker keyring only if it doesn't exist yet.
[[ ! -e /usr/share/keyrings/docker-archive-keyring.gpg ]] && \
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
  sudo gpg --dearmor -o \
       /usr/share/keyrings/docker-archive-keyring.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
    | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io
#+END_SRC
**** Installed docker-compose (instead of a newer docker-compose-plugin) because of bash completions.
**** Created a nextcloud user, added him to sudo and docker groups.
** Make the core (traefik and portainer) work with proper certs.
*** Created a new directory in the git repo for remote server configuration.
*** Created CNAME DNS records for portainer.server.com and traefik.server.com in Claudflare's dashboard.
**** Problem: CNAME records don't work.
**** Solved: Started working by itself after I took a break. After that I remembered that DNS records actually take some time to work.
*** Modifying traefik configuration to make it work on a server:
**** Fix Entrypoints and container labels in docker-compose.yml in core/
**** DONE Re-enable https (but use the staging letsencrypt server first !!!!) in traefik config files traefik.yml and dynamic.yml
CLOSED: [2022-08-03 Wed 15:52]
** DONE Get certs with Traefik.
CLOSED: [2022-08-04 Thu 19:42]
*** DONE Fake (training) cert.
CLOSED: [2022-08-03 Wed 20:43]
*** Issues with traefik: acme.json file's perms were not 600 - fixed. It was important to scroll all the way up to look at the first error. Last ones were cryptic but became clear when realized what failed first.
*** Issues with traefik: secureHeaders middleware was not defined properly. It was in the dynamic.yml traefik conf file that got stripped and had most of it's content moved to dynamic-password-hash.yml. Moved the definition of secureHeaders to the new file.
*** DONE Real cert.
CLOSED: [2022-08-03 Wed 20:59]
Since staging cert worked nicely, all I had to do was change the
caServer to the non-staging. Browser kept showing invalid cert
(staging cert), but after restarting it started showing correctly.

** DONE http to https redirect with Traefik.
CLOSED: [2022-08-03 Wed 20:43]
** TODO Get the app (nextcloud) to run on the server.
*** TODO Read through configs that worked locally and make changes needed to make them work on a server.
*** 
** Small security improvements:
*** Changed htpasswd basic auth password to use Bcrypt instead of MD5, as it's much safer.
*** Forced TLS 1.3 instead of 1.2. This also makes it ok to put the tls cipher suites in the repo (as explained by a drunk security expert at a bar).
* DONE Experimental Nginx server (that in future will be used as a landing page for QR code from the CV or for hosting stuff for friends/myself that sits behind a basicAuth password.
CLOSED: [2022-08-06 Sat 13:34]
** Created a docker-compose file for the server, using an external volume (not created with this docker-compose file) for web server data.

* TODO Configure Nextcloud:
Nextcloud calls it's plugins Apps. Most of fancy capabilities are
enabled trough apps.
** Add Group Folders App
** Add an App for user creation.
** Connect a Backblaze bucket (as s3, using an App for external storage).


* Features Ideas:
** TODO Use a Backblaze container
*** There is a Nextcloud app that allows connecting remote storage systems, including s3. Might be easier to configure it there than to learn how to set up auto-mounting of s3 containers on a server.

** TODO Docker Swarm with a separate manager node.
*** Get Swarm to Work
*** Automate Reading secrets by docker swarm.

** TODO Use Cloudflare's fancy routing and host protection.
** DONE Use docker compose.
CLOSED: [2022-08-03 Wed 21:00]
#+BEGIN_SRC bash
Base version - apache

This version will use the apache image and add a mariaDB container. The volumes are set to keep your data persistent. This setup provides no ssl encryption and is intended to run behind a proxy.

Make sure to pass in values for MYSQL_ROOT_PASSWORD and MYSQL_PASSWORD variables before you run this setup.

version: '2'

volumes:
  nextcloud:
  db:

services:
  db:
    image: mariadb
    restart: always
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    volumes:
      - db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=
      - MYSQL_PASSWORD=
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud

  app:
    image: nextcloud
    restart: always
    ports:
      - 8080:80
    links:
      - db
    volumes:
      - nextcloud:/var/www/html
    environment:
      - MYSQL_PASSWORD=
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=db

Then run docker-compose up -d, now you can access Nextcloud at http://localhost:8080/ from your host system.

#+END_SRC

** DONE Use Docker Secrets
CLOSED: [2022-07-20 Wed 19:19]
*** Copied from Docker Hub Readme file for Nextcloud.
#+BEGIN_SRC bash
Docker Secrets

As an alternative to passing sensitive information via environment variables, _FILE may be appended to the previously listed environment variables, causing the initialization script to load the values for those variables from files present in the container. In particular, this can be used to load passwords from Docker secrets stored in /run/secrets/<secret_name> files. For example:

version: '3.2'

services:
  db:
    image: postgres
    restart: always
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    secrets:
      - postgres_db
      - postgres_password
      - postgres_user

  app:
    image: nextcloud
    restart: always
    ports:
      - 8080:80
    volumes:
      - nextcloud:/var/www/html
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - NEXTCLOUD_ADMIN_PASSWORD_FILE=/run/secrets/nextcloud_admin_password
      - NEXTCLOUD_ADMIN_USER_FILE=/run/secrets/nextcloud_admin_user
    depends_on:
      - db
    secrets:
      - nextcloud_admin_password
      - nextcloud_admin_user
      - postgres_db
      - postgres_password
      - postgres_user

volumes:
  db:
  nextcloud:

secrets:
  nextcloud_admin_password:
    file: ./nextcloud_admin_password.txt # put admin password in this file
  nextcloud_admin_user:
    file: ./nextcloud_admin_user.txt # put admin username in this file
  postgres_db:
    file: ./postgres_db.txt # put postgresql db name in this file
  postgres_password:
    file: ./postgres_password.txt # put postgresql password in this file
  postgres_user:
    file: ./postgres_user.txt # put postgresql username in this file

Currently, this is only supported for NEXTCLOUD_ADMIN_PASSWORD, NEXTCLOUD_ADMIN_USER, MYSQL_DATABASE, MYSQL_PASSWORD, MYSQL_USER, POSTGRES_DB, POSTGRES_PASSWORD, POSTGRES_USER, REDIS_HOST_PASSWORD and SMTP_PASSWORD.

If you set any group of values (i.e. all of MYSQL_DATABASE_FILE, MYSQL_USER_FILE, MYSQL_PASSWORD_FILE, MYSQL_HOST), the script will not use the corresponding group of environment variables (MYSQL_DATABASE, MYSQL_USER, MYSQL_PASSWORD, MYSQL_HOST).

#+END_SRC

** DONE Use Traefik.
CLOSED: [2022-07-17 Sun 14:22]
** DONE Use Portainer.
CLOSED: [2022-07-17 Sun 14:22]
* Extras:
** TODO Vagrant doesn't start automatically (requires choosing an interface to bridge with). Make it use wlp3s0 by default.
** [[https://stackoverflow.com/a/72599205][Link]]: Downloading contents of a git repo without creating the git repo itself (without creating .git directory and all the stuff inside it)
in my case:
#+BEGIN_SRC bash
curl -L
https://github.com/rafrasenberg/docker-traefik-portainer/archive/master.tar.gz |
tar zxf -
#+END_SRC
*** It's pretty cool, because it allows "cloning" stuff into directories already indexed by another repo.
*** To extract right inside current directory and not into a directory inside it: use an extra 'tar' long option to strip 1 level of subdirectories.
