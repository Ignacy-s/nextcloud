Need to setup my own Nextcloud/Owncloud instance for wedding
pictures.
* DONE Choosing what to install - Nextcloud has ~20k stars on Github, Owncloud - ~7.5k. Choosing Nextcloud
  CLOSED: [2022-07-04 Mon 09:17]
* DONE Choosing how to install.
  CLOSED: [2022-07-04 Mon 09:17]
** Using Nextcloud docker image.
* DONE Local demo without compose - just the Nextcloud container.
  CLOSED: [2022-07-04 Mon 09:16]
** Found installation instructions in the manual, but why bother. Better use docker images.
** Deciding not to over complicate implementation for now and leave all the bells and whistles ideas as  extr
** For starter managed to access web server on vagrant machine from friends mobile phone. (Re-started container in bridged network mode and found it's ip address).
*** Had some issues at first, but then realized that friend is not connected to my hotspot.
* DONE Local demo with docker-compose, multiple containers, but without proper secrets handling.
  CLOSED: [2022-07-04 Mon 23:52]
** Using the docker compose file from image's documentation (that can be found in this document under 'Feature Ideas>Use docker compose').
** Had to download docker-compose. Started the service by running 'docker-compose -d up' in the directory where I pasted the compose.yml file. It works as intended.

* DONE Running a Traefik tutorial from [[https://doc.traefik.io/traefik/getting-started/quick-start/][here]]. Still have notes from the last time I used Traefik, but it has been a while and it's just about creating some docker-compose files.
  CLOSED: [2022-07-08 Fri 02:38]
*** First docker compose from quickstart tutorial.
#+BEGIN_SRC ruby
version: '3'

services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.7
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
#+END_SRC
**** Adding whoami service:
#+BEGIN_SRC ruby
  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    labels:
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
#+END_SRC
**** Scaled up with 'docker-compose up -d --scale whoami=2' and can see how service is load balanced with 'curl -H Host:whoami.docker.localhost http://127.0.0.1' showing different machines.
** As I understand, Traefik doesn't change much in how the system's docker-compose file will be made. It's just another container to be run along others. And the other containers need an extra rubric in docker-compose file with labels to be read by Traefik.
* DONE Learning up on DNS in Docker from [[https://web.archive.org/web/20210724052518/https://kerneltalks.com/networking/how-docker-container-dns-works/][blog article on wayback machine]].
  CLOSED: [2022-07-08 Fri 02:38]
* DONE Getting a domain with Cloud Flare.
  CLOSED: [2022-07-08 Fri 02:42]
* DONE Reading up on how to use secrets with docker compose. Mentioning some sites:
  CLOSED: [2022-07-08 Fri 03:57]
** [[https://www.rockyourcode.com/using-docker-secrets-with-docker-compose/]]
*** For a local setup we can use files containing the secrets.
*** For production need to use docker swarm to declare secrets on a different node.
* TODO Local demo with docker-compose, traefik and portainer alongside, defining a network. Based on edited compose file from previous class.
** Writing a new docker-compose file based on examples from Docker Masterclass, Panda DevOps and Traefik Quickstart tutorial.
*** After defining the network, adding traefik container, nextcloud container and db for nextcloud.
#+BEGIN_SRC bash
version : '3'
# Defining a personal Nextcloud server with Traefik and Portainer

services:
  traefik-proxy:
    # Handles TLS certs and http to https redirection
    image: traefik:2.8
    restart: always
    container_name: traefik
    command:
      # Enables the web UI
      - "--api.insecure=true"
      # Declares cooperation with docker
      - "--providers.docker"
      ports:
        - "80:80"
        # For Web UI enabled by 'api-insecure'
        - "8080:8080"
      volumes:
        # Enables docker cooperation
        - "/var/run/docker.sock:/var/run/docker.sock:ro"

  nextcloud:
    image: nextcloud
    restart: always
    depends_on:
      - traefik-proxy
      - db-next
    volumes:
      - nextcloud:/var/www/html
    environment:
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=db
      
    networks:
      - nextcloud_db_network
      
  db-next:
    image: mariadb
    restart: always
    command:
      - --transaction-isolation=READ-COMMITTED
      - --binlog-format=ROW
    volumes:
      - db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
    depends_on:
      - traefik-proxy
    networks:
      - nextcloud_db_network
              



networks:
  nextcloud_db_network:
    driver: bridge
#+END_SRC
*** DONE Add volumes
    CLOSED: [2022-07-08 Fri 17:42]
#+BEGIN_SRC bash
version : '3'
# Defining a personal Nextcloud server with Traefik and Portainer

services:
  traefik-proxy:
    # Handles TLS certs and http to https redirection
    image: traefik:2.8
    restart: always
    container_name: traefik
    command:
      # Enables the web UI
      - "--api.insecure=true"
      # Declares cooperation with docker
      - "--providers.docker"
      # Defines entry for regular http traffic.
      - "--entryPoints.web.address=:80"
      # Redirects http to https
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # Defines https entry
      - "--entryPoints.websecure.address=:443"
      

    ports:
      - "80:80"
      # For Web UI enabled by 'api-insecure'
      - "8080:8080"
    volumes:
      # Enables docker cooperation
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  nextcloud:
    image: nextcloud
    restart: always
    depends_on:
      - traefik-proxy
      - db-next
    volumes:
      - nextcloud:/var/www/html
    environment:
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=db

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.localhost`)"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
    networks:
      - nextcloud_db_network
      
  db-next:
    image: mariadb
    restart: always
    command:
      - --transaction-isolation=READ-COMMITTED
      - --binlog-format=ROW
    volumes:
      - db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
    depends_on:
      - traefik-proxy
    networks:
      - nextcloud_db_network

networks:
  nextcloud_db_network:
    driver: bridge

volumes:
  nextcloud:
  db:
#+END_SRC
**** TODO See if it runs.
***** Doesn't run - trying with a simpler setup.
***** Got the quickstart demo to run. Had to modify a HTTP Header.
http headers are sent along with the http request. They have to be
changed if we connect with a host behind traefik. Before I used curl
to get it to run. Defining headers in curl is easy:
curl -H Host:whoami.docker.localhost http://127.0.0.1
*** TODO Add secrets
**** TODO In files first.
** Get Portainer.
* TODO Online demo using the domain.
** Getting the docker-compose file to run on the server.
*** TODO Installing docker & utils on the server.
* TODO Get certs with Traefik.
** Fake (training) cert.
** Real cert.
* TODO http to https redirect with Traefik.
* TODO Docker Swarm with a separate manager node.
** Get Swarm to Work
** Automate Reading secrets by docker swarm.

* Features Ideas:
** Use Backblaze container
** DONE Use docker compose.
   CLOSED: [2022-07-04 Mon 23:51]
#+BEGIN_SRC bash
Base version - apache

This version will use the apache image and add a mariaDB container. The volumes are set to keep your data persistent. This setup provides no ssl encryption and is intended to run behind a proxy.

Make sure to pass in values for MYSQL_ROOT_PASSWORD and MYSQL_PASSWORD variables before you run this setup.

version: '2'

volumes:
  nextcloud:
  db:

services:
  db:
    image: mariadb
    restart: always
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    volumes:
      - db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=
      - MYSQL_PASSWORD=
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud

  app:
    image: nextcloud
    restart: always
    ports:
      - 8080:80
    links:
      - db
    volumes:
      - nextcloud:/var/www/html
    environment:
      - MYSQL_PASSWORD=
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_HOST=db

Then run docker-compose up -d, now you can access Nextcloud at http://localhost:8080/ from your host system.

#+END_SRC

** Use Docker Secrets
*** Copied from Docker Hub Readme file for Nextcloud.
#+BEGIN_SRC bash
Docker Secrets

As an alternative to passing sensitive information via environment variables, _FILE may be appended to the previously listed environment variables, causing the initialization script to load the values for those variables from files present in the container. In particular, this can be used to load passwords from Docker secrets stored in /run/secrets/<secret_name> files. For example:

version: '3.2'

services:
  db:
    image: postgres
    restart: always
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    secrets:
      - postgres_db
      - postgres_password
      - postgres_user

  app:
    image: nextcloud
    restart: always
    ports:
      - 8080:80
    volumes:
      - nextcloud:/var/www/html
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - NEXTCLOUD_ADMIN_PASSWORD_FILE=/run/secrets/nextcloud_admin_password
      - NEXTCLOUD_ADMIN_USER_FILE=/run/secrets/nextcloud_admin_user
    depends_on:
      - db
    secrets:
      - nextcloud_admin_password
      - nextcloud_admin_user
      - postgres_db
      - postgres_password
      - postgres_user

volumes:
  db:
  nextcloud:

secrets:
  nextcloud_admin_password:
    file: ./nextcloud_admin_password.txt # put admin password in this file
  nextcloud_admin_user:
    file: ./nextcloud_admin_user.txt # put admin username in this file
  postgres_db:
    file: ./postgres_db.txt # put postgresql db name in this file
  postgres_password:
    file: ./postgres_password.txt # put postgresql password in this file
  postgres_user:
    file: ./postgres_user.txt # put postgresql username in this file

Currently, this is only supported for NEXTCLOUD_ADMIN_PASSWORD, NEXTCLOUD_ADMIN_USER, MYSQL_DATABASE, MYSQL_PASSWORD, MYSQL_USER, POSTGRES_DB, POSTGRES_PASSWORD, POSTGRES_USER, REDIS_HOST_PASSWORD and SMTP_PASSWORD.

If you set any group of values (i.e. all of MYSQL_DATABASE_FILE, MYSQL_USER_FILE, MYSQL_PASSWORD_FILE, MYSQL_HOST), the script will not use the corresponding group of environment variables (MYSQL_DATABASE, MYSQL_USER, MYSQL_PASSWORD, MYSQL_HOST).

#+END_SRC

** Use Traefik.
** Use Portainer.
* Extras:
** TODO Vagrant doesn't start automatically (requires choosing an interface to bridge with). Make it use wlp3s0 by default.
